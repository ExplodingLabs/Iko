begin;

create function api.refresh_token() returns void
as $$
declare
  user_ text;
  access_token text;
  headers text;
  refresh_token_ text;
  role_ text;
begin
  -- Get the request token from cookie
  refresh_token_ := current_setting('request.cookies', true)::json->>'refresh_token';

  -- Check the refresh token exists and is still valid
  select username into user_
  from auth.refresh_token
  where token = refresh_token_
  and created_at > now() - interval '30 days';

  if user_ is null then
    raise sqlstate 'PT401'
    using message = 'Invalid or expired refresh token';
  end if;

  select role into role_
  from auth.user
  where username = user_;

  if role_ is null then
    raise sqlstate 'PT401'
    using message = 'Unknown user';
  end if;

  -- Generate new access token
  select auth.generate_access_token(
    role_,
    user_,
    current_setting('pgrst.jwt_secret')
  ) into access_token;

  headers := '['
  '{"Set-Cookie": "access_token=' || access_token || '; Path=/; HttpOnly;"}'
  ']';
  perform set_config('response.headers', headers, true);
end;
$$
language plpgsql
security definer;

commit;
