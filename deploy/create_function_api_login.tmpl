begin;

create function api.login(username text, password text) returns text
as $$
declare
  _role name;
  access_token text;
  refresh_token text;
begin
  -- check email and password
  select auth.user_role (username, password) into _role;
  if _role is null then
    raise invalid_password
    using message = 'Invalid user or password';
  end if;

  -- Generate a JWT access token, that expires in one hour
  select public.sign(row_to_json(r), current_setting('app.jwt_secret')) as access_token
    from (select _role as role, login.email as email, extract(epoch from now())::integer + 60 * 60 as exp) r into access_token;

  -- Generate and store a refresh token that expires in 7 days
  refresh_token = public.gen_random_uuid()
  insert into auth.refresh_tokens (token)
  values (refresh_token);

  set local "response.headers" = '[{"Set-Cookie": "refreshToken=' || refresh_token || '; Secure; Path=/; SameSite=Strict;}]';

  return access_token;

end;
$$
language plpgsql
security definer;

commit;
