begin;

create function api.login(user_ text, pass text) returns void
as $$
declare
  role_ name;
  access_token text;
  refresh_token text;
  headers text;
begin
  -- Check username and password
  select role
  from auth.user
  where username = user_
    and password = public.crypt(pass, password)
  into role_;

  if role_ is null then
    raise sqlstate 'PT401'
    using message = 'Invalid user or password';
  end if;

  -- Generate a JWT access token that expires in one hour, and set cookie
  select public.sign(row_to_json(r), current_setting('pgrst.jwt_secret')) as access_token
    from (select role_ as role, login.user_ as username, extract(epoch from now())::integer + 60 * 60 as exp) r into access_token;

  -- Generate a refresh token that expires in 7 days, and set cookie
  refresh_token := public.gen_random_uuid();
  insert into auth.refresh_token (token)
  values (refresh_token);

  headers := '['
  '{"Set-Cookie": "access_token=' || access_token || '; Domain=.screenpilot.com.au; Secure; Path=/; HttpOnly; SameSite=Strict;"},'
  '{"Set-Cookie": "refresh_token=' || refresh_token || '; Domain=.screenpilot.com.au; Secure; Path=/refresh_token; HttpOnly; SameSite=Strict;"}'
  ']';
  perform set_config('response.headers', headers, true);
end;
$$
language plpgsql
security definer;

commit;
