begin;

create function api.refresh_token() returns void
as $$
declare
  access_token text;
  access_token_header text;
  refresh_token text;
  valid bool;
begin
  -- Get token with cookie
  refresh_token := request.cookie.refreshToken;

  -- Check the refresh token exists and is still valid
  select username, role
  from auth.refresh_token
  where token = refresh_token
  and created_at > current_date - interval '2 minutes';

  if not valid then
    raise sqlstate 'PT401'
    using message = 'Invalid or expired refresh token';
  end if;

  -- Generate a JWT access token that expires in one hour, and set cookie
  select public.sign(row_to_json(r), current_setting('app.jwt_secret')) as access_token
    from (select role_ as role, login.username as username, extract(epoch from now())::integer + 60 * 60 as exp) r into access_token;

  access_token_header := '[{"Set-Cookie": "accessToken=' || access_token || '; Domain=.screenpilot.com.au; Secure; Path=/; HttpOnly; SameSite=Strict;"}]';
  set local "response.headers" = access_token_header;
end;
$$
language plpgsql
security definer;

commit;
