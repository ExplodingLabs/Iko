begin;

create function api.refresh_token(email text, pass text)
as $$
declare
  _role name;
  access_token text;
  refresh_token text;
begin
  select 1 from auth.refresh_token where 

  if _role is null then
    raise invalid_password
    using message = 'Invalid user or password';
  end if;

  select public.sign(row_to_json(r), current_setting('app.jwt_secret')) as access_token
    from (select _role as role, login.email as email, extract(epoch from now())::integer + 60 * 60 as exp) r into access_token;

  refresh_token = public.gen_random_uuid()
  insert into auth.refresh_tokens (token)
  values (refresh_token);

  set local "response.headers" = '[{"Set-Cookie": "accessToken=' || access_token || '; Secure; Path=/; SameSite=Strict;"}, {"Set-Cookie": "refreshToken=' || refresh_token || '; Secure; Path=/; SameSite=Strict;}]';

end;
$$
language plpgsql
security definer;

commit;
