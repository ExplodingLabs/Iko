begin;

create function api.refresh_token() returns void
as $$
declare
  access_token text;
  access_token_header text;
  refresh_token text;
  valid bool;
begin
  -- Get token with cookie
  refresh_token := current_setting('request.cookies', true)::json->>'refresh_token';

  -- Check the refresh token exists and is still valid
  select username, role
  from auth.refresh_token
  where token = refresh_token
  and created_at > current_date - interval '2 minutes';

  if not valid then
    raise sqlstate 'PT401'
    using message = 'Invalid or expired refresh token';
  end if;

  select auth.generate_access_token(role_, login.user_) into access_token;

  headers := '[{"Set-Cookie": "access_token=' || access_token || '; Domain=.screenpilot.com.au; Secure; Path=/; HttpOnly; SameSite=Strict;"}]';
  perform set_config('response.headers', headers, true);
end;
$$
language plpgsql
security definer;

commit;
